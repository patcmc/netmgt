# frozen_string_literal: true

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require "cucumber/rails"
require "capybara/rails"
require "capybara/cucumber"
require "selenium-webdriver"

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
  DatabaseCleaner.allow_remote_database_url = true
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

# Capybara Configuration
Capybara.configure do |config|
  # Set the default maximum wait time for asynchronous processes
  config.default_max_wait_time = 5 # seconds

  # Choose the default driver based on whether the scenario is JavaScript-enabled
  config.default_driver = :rack_test
  config.javascript_driver = :selenium_chrome_headless # Use headless Chrome for JS tests

  # Optional: Customize the app host if testing against an external server
  # config.app_host = 'http://localhost:3000'
end

# If you're using RSpec matchers in Cucumber steps
require "capybara/rspec"
World(Capybara::DSL, RSpec::Matchers)

# Include FactoryBot methods if you're using FactoryBot for test data
World(FactoryBot::Syntax::Methods)

# Additional requires and configurations can be placed here
# For example, support for custom matchers, macros, etc.

# Hooks to manage DatabaseCleaner around scenarios
Before do |scenario|
  # Switch DatabaseCleaner strategy based on scenario tags
  DatabaseCleaner.strategy = if scenario.tags.map(&:name).include?("@javascript")
    :truncation
  else
    :transaction
  end
  DatabaseCleaner.start
end

After do
  DatabaseCleaner.clean
end
